I"<h1 id="设计并行编程-1">设计并行编程 <sup>1</sup></h1>
<p><strong>任务分解</strong>：将程序分解为任务，在不同处理器上执行以实现并行化。<em>（可以使用以下两种方法）</em></p>
<blockquote>
  <ul>
    <li><strong>领域分解</strong>：将<code class="highlighter-rouge">问题数据</code>分解 <em>（当处理的数据量很大时，分开处理）</em></li>
    <li><strong>功能性分解</strong>：将<code class="highlighter-rouge">问题</code>分解为任务 <em>（把大的任务分解为多个小任务处理）</em></li>
  </ul>
</blockquote>

<p><strong>任务分配</strong>：将任务分配到各个处理器上 <em>（目的是<code class="highlighter-rouge">负载均衡</code>）</em></p>

<p><strong>聚集</strong>：将小任务与大任务合并到一起从而改进性能的过程
如果任务数量远远超过可用的处理器数量，由于线程切换等其它因素会导致效率降低
如果计算机有针对大量小任务而进行特别的设计，如采用GPU计算，那将能从大量小任务的运行中获益</p>

<p><strong>映射</strong>：指定哪个任务将要执行 <em>（目标是将总执行时间降到最低）(可以使用以下2中策略，这2个策略间由于是冲突的，需要做出权衡)</em></p>
<blockquote>
  <ul>
    <li>通信频繁的任务放在同一个处理器中来增加<code class="highlighter-rouge">局部性</code></li>
    <li>可以并发执行的任务放在不同的处理器中增加<code class="highlighter-rouge">并发性</code></li>
  </ul>
</blockquote>

<p><em><strong>注意!</strong> 映射问题，即NP完备 <sup>2</sup>。对于相同大小的任务，很容易直接映射
如果是每个任务的工作量千差万别，就需要采用<code class="highlighter-rouge">负载均衡算法</code>在运行期间确定聚集与映射的策略。
如果在程序执行期间通信量或任务量发生变化的情况，可以使用<code class="highlighter-rouge">动态的负载均衡算法</code></em></p>

<p><em>（不同的问题存在多种负载均衡算法，有全局或局部的。全局算法需要全局的掌握，会增加大量成本。局部算法只依赖于特定任务本身的信息，不过难以找到最优）
（存在 管理者/执行者（管理者调度）、层次化的管理者/执行者（分组，每组都有个管理者调度）、去中心化的模型（每个处理器会维护自己的任务池））</em></p>

<hr />
<h1 id="进程与线程比较-3">进程与线程比较 <sup>3</sup></h1>
<h2 id="性能比较">性能比较</h2>
<p>多线程比多进程成本低，但性能更低</p>
<h2 id="优缺点对比">优缺点对比</h2>
<blockquote>
  <h3 id="多进程优点">多进程优点</h3>
  <ul>
    <li>每个进程相互<strong>独立</strong>，子进程异常不影响父进程</li>
    <li>通过增加CPU，就可容<strong>易扩充</strong>性能</li>
    <li><strong>没有锁</strong>的影响</li>
    <li>每个子进程都有<strong>独立的地址空间和资源</strong>
      <h3 id="多进程缺点">多进程缺点</h3>
    </li>
    <li>逻辑<strong>控制复杂</strong>，需要和主进程交互</li>
    <li>需要<strong>跨进程边界</strong>，如有大量数据需要传输不太好，适合少量数据传输、密集运算</li>
  </ul>
</blockquote>

<blockquote>
  <h3 id="多线程优点">多线程优点</h3>
  <ul>
    <li>逻辑<strong>控制简单</strong></li>
    <li><strong>无</strong>需跨进程边界</li>
    <li>可直接<strong>共享资源</strong></li>
    <li>资源消耗比进程<strong>少</strong>
      <h3 id="多线程缺点">多线程缺点</h3>
    </li>
    <li>其中的某个线程崩溃可能会<strong>影响</strong>整个程序</li>
    <li>线程之间的同步和<strong>锁</strong>的控制比较麻烦</li>
    <li>每个线程与主线程<strong>共用</strong>地址空间</li>
  </ul>
</blockquote>

<p><strong>注意!</strong> 无论进程，还是线程多了以后，他们的<strong>调度也会消耗较多的CPU资源</strong></p>

<hr />
<h1 id="python并行编程的问题">python并行编程的问题</h1>
<p>一般来说，一个进程可以包含多个并行线程。不过，Python解释器并非完全是线程安全的。为了支持多线程的Python程序，会使用名为全局解释器锁<code class="highlighter-rouge">GIL</code>（Global Interpreter Lock）的<strong>全局锁</strong>。这意味着在同一时刻只有一个线程会执行Python代码。<em>（如果多个线程尝试访问同一个对象数据，那么它可能处于不一致的状态）</em></p>

<p>故此，python中的并行编程想要发挥多核的优势<strong>推荐使用多进程代替多线程</strong></p>

<p>为什么不去除GIL? 更多细节：<a href="https://www.oschina.net/translate/pythons-hardest-problem">Python 最难的问题</a></p>

<hr />
<h1 id="python中进程与线程的效率">python中进程与线程的效率</h1>
<p>由于python自身存在GIL的问题，同一时刻只能运行一个线程，在一些实验对比中，我们会发现python中进程与线程之间的差异，在这里直接给出结论
对比操作：<code class="highlighter-rouge">CPU密集型</code>、<code class="highlighter-rouge">IO密集型</code>、<code class="highlighter-rouge">网络请求密集型</code></p>
<blockquote>
  <p><strong>多线程</strong></p>
  <ul>
    <li>CPU密集型操作，性能更差</li>
    <li>IO密集型操作，性能更差</li>
    <li>网络请求密集型操作，优势明显</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>多进程</strong></p>
  <ul>
    <li>CPU密集型操作，优势明显</li>
    <li>IO密集型操作，优势明显</li>
    <li>网络请求密集型操作，与多线程相差无几，却更占用CPU等资源</li>
  </ul>
</blockquote>

<p>故CPU密集型、IO密集型操作，首选多进程，网络请求密集型选择多线程</p>

<p><em>（附：如果追求效率，CPU密集型操作应首选<code class="highlighter-rouge">C/C++</code>语言
IO密集型操作，CPU消耗很少，换用C/C++也很难得到效率的提升，应采用开发效率高的语言，<code class="highlighter-rouge">脚本语言</code>是首选）</em></p>

<p>更多细节：<a href="http://www.runoob.com/w3cnote/python-single-thread-multi-thread-and-multi-process.html">Python中单线程、多线程和多进程的效率对比实验</a></p>

<hr />
<p>1.参考书籍: 《Python并行编程手册》</p>

<p>2.NP完全问题: NP完全问题是世界七大数学难题之一。所有的完全多项式非确定性问题，都可以转换为一类叫做满足性问题的逻辑运算问题。既然这类问题的所有可能答案，都可以在多项式时间内计算，人们于是就猜想，是否这类问题存在一个确定性算法，可以在多项式时间内直接算出或是搜寻出正确的答案呢？这就是著名的NP=P？的猜想（百度百科）
https://zh.wikipedia.org/wiki/NP%E5%AE%8C%E5%85%A8（wiki百科）</p>

<p>3.多线程和多进程的区别: 参考：追溯到最早的一篇2011年的页面已失效了</p>

:ET